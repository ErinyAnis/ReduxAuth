{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\nconst sendCartData = cart => {\n  _s();\n  const dispathch = useDispatch();\n  return async dispatch => {\n    dispathch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending card data!\"\n    }));\n    const sendRequest = async () => {\n      const response = await fetch(\"https://first-project-fd018-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n    try {\n      await sendRequest();\n      dispathch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Send cart data successfully!\"\n      }));\n    } catch (error) {\n      dispathch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending card data failed!\"\n      }));\n    }\n    ;\n  };\n};\n_s(sendCartData, \"tglPQT13/8V9Fum3CihOPh7ZOTI=\", false, function () {\n  return [useDispatch];\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","useSelector","useDispatch","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","_s","dispathch","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"sources":["D:/udemy-react-course2/redux2/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === newItem.id);\r\n      state.totalQuantity++;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          price: newItem.price,\r\n          quantity: 1,\r\n          totalPrice: newItem.price,\r\n          name: newItem.title,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((item) => item.id === id);\r\n      state.totalQuantity--;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((item) => item.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nconst sendCartData = (cart) => {\r\n    const dispathch = useDispatch();\r\n  return async (dispatch) => {\r\n    dispathch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending card data!\",\r\n      })\r\n    );\r\n\r\n    const sendRequest = async () => {\r\n        const response = await fetch(\r\n            \"https://first-project-fd018-default-rtdb.firebaseio.com/cart.json\",\r\n            {\r\n              method: \"PUT\",\r\n              body: JSON.stringify(cart),\r\n            }\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(\"Sending cart data failed.\");\r\n          }\r\n    };\r\n\r\n    try{\r\n         await sendRequest();\r\n\r\n         dispathch(\r\n            uiActions.showNotification({\r\n              status: \"success\",\r\n              title: \"Success\",\r\n              message: \"Send cart data successfully!\",\r\n            })\r\n          );\r\n    } catch (error) {\r\n        dispathch(\r\n            uiActions.showNotification({\r\n              status: \"error\",\r\n              title: \"Error!\",\r\n              message: \"Sending card data failed!\",\r\n            })\r\n          );\r\n    };\r\n\r\n   \r\n\r\n    \r\n  };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}